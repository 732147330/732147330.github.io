(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-4759bd46"],{9771:function(t,n,e){var r=e("aba1");"string"===typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var a=e("499e").default;a("e5412cd0",r,!0,{})},aba1:function(t,n,e){n=t.exports=e("2350")(!1),n.push([t.i,"\n.MaximumBinaryTree{\n}\n.MaximumBinaryTree__wrap p{\n    text-align: center;\n}\n",""])},e4fe:function(t,n,e){"use strict";e.r(n);e("ac6a"),e("5df3"),e("f400"),e("a481"),e("4f37"),e("28a5"),e("57e7");var r=e("3d68"),a=e("5234"),i=e("f678"),l=e("4c7a");function s(t){this.val=t,this.left=this.right=null}var u=function t(n,e,r,a){r.hasOwnProperty(a)?r[a]++:r[a]=0;var i=r[a];if(Math.pow(2,a-1)+(i-1)>=Math.pow(2,a-1)-1&&Math.pow(2,a-1)+(i-1)<=Math.pow(2,a)-2&&(null!=n&&null!=n.val?e[Math.pow(2,a-1)+(i-1)]=n.val:e[Math.pow(2,a-1)+(i-1)]=null,a++,null!=n))return t(n.left,e,r,a),t(n.right,e,r,a),e},o=function t(n){if(0==n.length)return null;for(var e=n[0],r=1;r<n.length;r++)e<n[r]&&(e=n[r]);for(var a=[],i=[],l=0;l<n.length;l++)l<n.indexOf(e)?a.push(n[l]):l>n.indexOf(e)&&i.push(n[l]);var u=new s(e);return u.left=t(a),u.right=t(i),u};r["a"],a["a"],i["a"],l["a"];function h(t){this.val=t,this.left=this.right=null}var c=function t(n,e,r,a){r.hasOwnProperty(a)?r[a]++:r[a]=0;var i=r[a];if(Math.pow(2,a-1)+(i-1)>=Math.pow(2,a-1)-1&&Math.pow(2,a-1)+(i-1)<=Math.pow(2,a)-2&&(null!=n&&null!=n.val?e[Math.pow(2,a-1)+(i-1)]=n.val:e[Math.pow(2,a-1)+(i-1)]=null,a++,null!=n))return t(n.left,e,r,a),t(n.right,e,r,a),e},f=function t(n){if(0==n.length)return null;for(var e=n[0],r=1;r<n.length;r++)e<n[r]&&(e=n[r]);for(var a=[],i=[],l=0;l<n.length;l++)l<n.indexOf(e)?a.push(n[l]):l>n.indexOf(e)&&i.push(n[l]);var s=new h(e);return s.left=t(a),s.right=t(i),s},m={components:{XButton:r["a"],XTextarea:a["a"],Group:i["a"],XInput:l["a"]},data:function(){return{val01:"输入: [3,2,1,6,0,5]\n输入: 返回下面这棵树的根节点：\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1",val02:"  var constructMaximumBinaryTree = function(nums) {\n    if(nums.length == 0){\n      return null;\n    }\n    let maxNum = nums[0];\n    //最大值筛选\n    for(let i = 1; i < nums.length; i++){\n      if(maxNum < nums[i]){\n        maxNum = nums[i];\n      }\n    }\n\n    //分左右数组\n    let nums_left = [];\n    let nums_right = [];\n    for(let i = 0; i < nums.length; i++){\n      if(i < nums.indexOf(maxNum)){\n        nums_left.push(nums[i]);\n      }else if (i > nums.indexOf(maxNum)){\n        nums_right.push(nums[i]);\n      }\n    }\n    let tree = new TreeNode(maxNum);\n    tree.left = constructMaximumBinaryTree(nums_left);\n    tree.right = constructMaximumBinaryTree(nums_right);\n    return tree;\n  };",str1:"[3,2,1,6,0,5]",str2:""}},methods:{commitStr:function(){for(var t=this.str1.replace("[","").replace("]","").trim().split(","),n=0;n<t.length;n++)t[n]=parseInt(t[n]);var e=f(t),r=c(e,[],new Map,1),a=t.length;this.str2="[";for(var i=0;i<r.length;i++)null!=r[i]?(a--,this.str2=0==a?this.str2+r[i]:this.str2+r[i]+","):a>0&&(this.str2=this.str2+r[i]+",");this.str2=this.str2+"]"},cleanCode:function(){this.str1="",this.str2=""}}},p=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"MaximumBinaryTree__wrap"},[t._m(0),e("group",{attrs:{title:"示例1："}},[e("x-textarea",{attrs:{"show-counter":!1,autosize:"autosize",disabled:"disabled"},model:{value:t.val01,callback:function(n){t.val01=n},expression:"val01"}})],1),e("group",{attrs:{title:"注意："}},[e("ul",[e("li",[t._v("1、给定的数组的大小在 [1, 1000] 之间。")])])]),e("group",{attrs:{title:"测试："}},[e("div",{attrs:{slot:"other"},slot:"other"},[e("x-button",{attrs:{mini:"mini",type:"primary"},nativeOn:{click:function(n){t.commitStr()}}},[t._v("提交")]),e("x-button",{attrs:{mini:"mini",type:"warn"},nativeOn:{click:function(n){t.cleanCode()}}},[t._v("清空")])],1),e("x-input",{attrs:{title:"输入(不含重复元素的整数数组):","label-width":"14em"},model:{value:t.str1,callback:function(n){t.str1=n},expression:"str1"}}),e("x-input",{attrs:{title:"输出:",disabled:"disabled"},model:{value:t.str2,callback:function(n){t.str2=n},expression:"str2"}})],1),e("group",{attrs:{title:"js代码："}},[e("x-textarea",{attrs:{"show-counter":!1,autosize:"autosize",disabled:"disabled"},model:{value:t.val02,callback:function(n){t.val02=n},expression:"val02"}})],1)],1)},v=[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("p",[t._v("给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下："),e("br"),t._v("1、二叉树的根是数组中的最大元素。"),e("br"),t._v("2、左子树是通过数组中最大值左边部分构造出的最大二叉树。"),e("br"),t._v("3、右子树是通过数组中最大值右边部分构造出的最大二叉树。"),e("br"),t._v("通过给定的数组构建最大二叉树，并且输出这个树的根节点。")])}],d=e("2455");function x(t){e("9771")}var w=!1,g=x,b=null,_=null,M=Object(d["a"])(m,p,v,w,g,b,_);n["default"]=M.exports}}]);